-- programs ------------------------------------------------
entrypoints Program ;

Program.   	Program 	::= [TopDef] ;

TopClassDef. 	TopDef 		::= ClassDef;
TopFunDef.    	TopDef 		::= FnDef;

FnDef.	   	FnDef 		::= Type Ident "(" [Arg] ")" Block ;
Arg. 	   	Arg 		::= Type Ident;

ClassField.     ClassMember     ::= Type [Ident] ";"; -- switch from Type to NonVoidType causes SR conflict
ClassMethod.    ClassMember     ::= FnDef;
ClassBlock.     ClassBlock      ::= "{" [ClassMember] "}" ;

Class.        	ClassDef 	::= "class" Ident ClassBlock ;
ClassInh.     	ClassDef 	::= "class" Ident "extends" Ident ClassBlock ;

separator Arg "," ;
separator nonempty TopDef "" ;
separator nonempty ClassMember "" ;

-- statements ----------------------------------------------

Block.     Block 	::= "{" [Stmt] "}" ;

Empty.     Stmt 	::= ";" ;

BStmt.     Stmt 	::= Block ;
Decl.      Stmt 	::= Type [Item] ";" ;

NoInit.    Item 	::= Ident ;
Init.      Item 	::= Ident "=" Expr ;

Ass.       Stmt 	::= Expr "=" Expr  ";" ;
Incr.      Stmt 	::= Ident "++"  ";" ;
Decr.      Stmt 	::= Ident "--"  ";" ;

Ret.       Stmt 	::= "return" Expr ";" ;
VRet.      Stmt 	::= "return" ";" ;

Cond.      Stmt 	::= "if" "(" Expr ")" Stmt  ;
CondElse.  Stmt 	::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt 	::= "while" "(" Expr ")" Stmt ;
For.       Stmt 	::= "for" "(" Type Ident ":" Expr ")" Stmt ;

SExp.      Stmt 	::= Expr  ";" ;

separator  Stmt "" ;
separator nonempty Item "," ;
separator nonempty Ident "," ;

-- Types ---------------------------------------------------

BCType.         ClassType       ::= Ident ;
Int.            BType           ::= "int" ;
Str.            BType           ::= "string" ;
Bool.           BType           ::= "boolean" ;

CType.          NonVoidType     ::= ClassType ;
BType.          NonVoidType 	::= BType ;

ArrayType.      Type            ::= NonVoidType "[]" ;
NonVoidType.    Type            ::= NonVoidType ;
Void.           Type            ::= "void" ;

separator  Type "," ;

-- Casts -------------------------------------------------

CastTypeClass.	CastType        ::=  NonVoidType ;
CastTypeArr.	CastType        ::=  NonVoidType "[]" ;

-- Expressions ---------------------------------------------


ENewObject.	Expr6 	::= "new" Ident  "(" ")" ;
ENewArray.	Expr6 	::= "new" NonVoidType "[" Expr "]" ;

EMember.	Expr6 	::= Expr6 "." Ident ;
EMemberCall.    Expr6 	::= Expr6 "." Ident "(" [Expr]")"  ;

EVar. 		Expr6 	::= Ident ;
ELitInt. 	Expr6   ::= Integer ;
ELitTrue. 	Expr6   ::= "true" ;
ELitFalse. 	Expr6   ::= "false" ;
ENull. 		Expr6   ::= "null" ;
EString. 	Expr6   ::= String ;

EApp. 		Expr6   ::= Ident "(" [Expr] ")" ;
EAccess. 	Expr6   ::= Expr6 "[" Expr "]";

ECast. 		Expr5   ::= Expr5 "as" CastType;
Neg. 		Expr5   ::= "-" Expr6 ;
Not. 		Expr5   ::= "!" Expr6 ;

EMul. 		Expr4   ::= Expr4 MulOp Expr5 ;
EAdd. 		Expr3   ::= Expr3 AddOp Expr4 ;
ERel. 		Expr2   ::= Expr2 RelOp Expr3 ;

EAnd. 		Expr1   ::= Expr2 "&&" Expr1 ;
EOr. 		Expr    ::= Expr1 "||" Expr ;

coercions Expr 6 ;
separator Expr "," ;

-- operators -----------------------------------------------

Plus.	AddOp   ::= "+" ;
Minus.	AddOp   ::= "-" ;
Times.	MulOp   ::= "*" ;
Div.	MulOp   ::= "/" ;
Mod.	MulOp   ::= "%" ;

LTH.	RelOp   ::= "<" ;
LE.	RelOp   ::= "<=" ;
GTH.	RelOp   ::= ">" ;
GE.	RelOp   ::= ">=" ;
EQU.	RelOp   ::= "==" ;
NE.	RelOp   ::= "!=" ;

-- comments ------------------------------------------------

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
